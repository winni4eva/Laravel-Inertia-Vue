<?php

namespace Tests\Managers;

use App\Managers\CompanyManager;
use App\Models\Company;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CompanyManagerTest extends TestCase
{

    use RefreshDatabase;

    public $company;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->company = Company::factory()->create(
            [
                'name' => 'Intellicore',
                'phone' => '0014533678986',
                'url' => 'https://www.intellicorecg.com',
                'email' => 'support@intellicore.com'
            ]
        );
    }

    protected function tearDown(): void
    {
        parent::tearDown();
    }

    public function test_it_can_be_created_with_a_company()
    {
        $manager = new CompanyManager($this->company);


        $this->assertSame($this->company, $manager->getCompany());
    }

    public function test_it_can_be_created_without_a_company()
    {
        $manager = new CompanyManager();


        $this->assertNull($manager->getCompany());
    }

    public function test_it_can_create_a_company()
    {
        $manager = new CompanyManager();
        $company = Company::factory()->make()->only(['name', 'phone', 'url', 'email']);
        
        $this->assertDatabaseMissing('companies', $company);

        $manager->createCompany($company);


        $this->assertSame($company['name'], $manager->getCompany()->name);
        $this->assertDatabaseHas('companies', $company);
    }

    public function test_it_can_update_a_company()
    {
        $oldCompany = Company::factory()->create();
        $manager = new CompanyManager($oldCompany);

        $oldCompany = $oldCompany->only(['name', 'phone', 'url', 'email']);

        $this->assertDatabaseHas('companies', $oldCompany);

        $newCompany = Company::factory()->make()->only(['name', 'phone', 'url', 'email']);
        unset($newCompany['ratings']);
        $this->assertDatabaseMissing('companies', $newCompany);

        $manager->updateCompany($newCompany);


        $this->assertSame($newCompany['name'], $manager->getCompany()->name);
        $this->assertDatabaseHas('companies', $newCompany);
        $this->assertDatabaseMissing('companies', $oldCompany);
    }

    public function test_it_can_delete_a_company()
    {
        $companyModel = Company::factory()->create();

        $company = $companyModel->only(['name', 'phone', 'url', 'email']);
        
        $this->assertDatabaseHas('companies', $company);

        $manager = new CompanyManager($companyModel);

        $manager->deleteCompany();

        $this->assertDatabaseMissing('companies', $company);
        $this->assertNull($manager->getCompany());
    }

    public function test_it_adds_a_rating_to_a_company()
    {
        $user = User::factory()->create();
        $company = Company::factory()->create();
        $manager = new CompanyManager($company);

        $this->actingAs($user);
        $manager->rateCompany(5, $company);


        $this->assertDatabaseCount('ratings', 1);
        $this->assertEquals(5, $company->rating);
    }

   public function test_it_adds_ratings_to_a_company()
   {
        $user = User::factory()->create();
        $company = Company::factory()->create();
        $manager = new CompanyManager($company);

        $this->actingAs($user);
        $manager->rateCompany(1, $company);
        $manager->rateCompany(1, $company);
        $manager->rateCompany(1, $company);
        $manager->rateCompany(2, $company);
        $manager->rateCompany(5, $company);

        $company->refresh();

        $this->assertDatabaseCount('ratings', 5);
        $this->assertEquals(2, $company->rating);
        $this->assertEquals(5, $company->ratingCount);
   }

}
